# This recipe creates 3 packages
# libopencv, py-opencv, opencv
#
# libopencv actually contains all the files, including the site-packages
# file needed to run opencv with python.
#     opencv-dnn seems to change on every patch version, therefore, we pin
#     to the patch version x.x.x
#
# py-opencv is a meta package that constrains the python dependencies
#     This one is pinned to the minor version. x.x
#
# opencv is a backward compatible package, with no pinnings
#
# This approach is different than the one in defaults. Default's package
# seperates well the files generated with python dependencies, from those
# generated without. Unfortunately, this isn't entirely supported by
# upstream. Their hacks are quite elaborate, making it seem difficult to
# maintain as opencv has been changing their build system recently.
#
# By putting all the generated files in 1 package, this makes the build process
# much easier, at the expense of a few MBs in the 'lib' package.
{% set version = "4.8.1" %}
{% set PY_VER_MAJOR = PY_VER[0] %}
{% set PY_VER_MINOR = PY_VER[2] %}

# Modified from recipe at: https://github.com/conda-forge/opencv-feedstock.git

package:
  name: libopencv
  version: {{ version }}

source:
  - git_url: https://github.com/opencv/opencv
    git_tag: {{ version }}
    patches:
      - 0001-Fixed-build-error-with-cuda12.2.patch      #[cudatoolkit == '12.2']

  - url: https://github.com/opencv/opencv_contrib/archive/{{ version }}.tar.gz
    fn: opencv_contrib-{{ version }}.tar.gz
    sha256: 0c082a0b29b3118f2a0a1856b403bb098643af7b994a0080f402a12159a99c6e
    folder: opencv_contrib
    
build:
  number: 3
  string: h{{ PKG_HASH }}_{{ build_type }}{{ cudatoolkit | replace(".*", "") }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}     #[build_type == "cuda"]
  string: h{{ PKG_HASH }}_{{ build_type }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}     #[build_type == "cpu"]
  run_exports:
    # https://abi-laboratory.pro/index.php?view=timeline&l=opencv
    # Things seem to change every patch versions, mostly the dnn module
    - {{ pin_subpackage('libopencv', max_pin='x.x.x') }}
  script_env:
    - GCC_HOME          #[ppc_arch == 'p10']
    - CUDA_HOME            #[build_type == "cuda"]

requirements:
  build:
    # Required to find ffpmeg
    - pkg-config {{pkgconfig}}
    - cmake {{cmake}}
    - ninja {{ninja}}
    - {{ compiler('c') }}         #[ppc_arch != "p10"]
    - {{ compiler('cxx') }}       #[ppc_arch != "p10"]
    - {{ cdt('mesa-libgl-devel') }}      #[not s390x]
    - {{ cdt('mesa-dri-drivers') }}
    - {{ cdt('libselinux') }}
    - {{ cdt('libxdamage') }}
    - {{ cdt('libxfixes') }}
    - {{ cdt('libxxf86vm') }}

  host:
    - python {{python}} 
    - numpy {{numpy}}
    - hdf5 {{hdf5}}
    - eigen {{eigen}}
    - jasper {{jasper}}                  #[not s390x]
    - zlib {{zlib}}
    - jpeg {{jpeg}}
    - openjpeg 
    - libtiff {{libtiff}}
    - libwebp
    - harfbuzz {{harfbuzz}}
    - libpng {{libpng}}
    - freetype {{freetype}}
    - protobuf {{ protobuf }}
    - libprotobuf {{ libprotobuf }}
    - cudatoolkit {{ cudatoolkit }}   #[build_type == 'cuda']
    - cudnn {{ cudnn }}               #[build_type == 'cuda']

  run:
    # Don't depend on python in the run section
    # py-opencv will depend on python
    - hdf5                             # versioning handled by run_exports
    - jasper                           #[not s390x]
    - zlib                             # versioning handled by run_exports
    - jpeg                             # versioning handled by run_exports
    - openjpeg
    - libwebp
    - harfbuzz                         # versioning handled by run_exports
    - libtiff                          # versioning handled by run_exports
    - libpng                           # versioning handled by run_exports
    # https://github.com/conda-forge/opencv-feedstock/issues/174
    # Seems like the OSX ABI has changed between 2.9 and 2.10???
    # That or a dependency wasn't merged in
    # Since we don't know the cause, we are choosing this pinning on all platforms.
    - {{ pin_compatible('freetype', min_pin='x.x') }}
    - cudatoolkit {{ cudatoolkit }}   #[build_type == 'cuda']
    - cudnn {{ cudnn }}               #[build_type == 'cuda']


outputs:
  - name: opencv-proc
    build:
      number: 1
      string: {{ build_type }}
    test:
      commands:
         - exit 0

  - name: libopencv
  - name: opencv
    build:
      string: {{ build_type }}{{ cudatoolkit | replace(".*", "") }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}     #[build_type == "cuda"]
      string: {{ build_type }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}     #[build_type == "cpu"]
      track_features:
        {{ "- opencv-cuda" if build_type == 'cuda' else "" }}

    requirements:
      host:
        - openblas-devel {{openblas}}
        - libopenblas {{openblas}}
      run:
        - {{ pin_subpackage('libopencv', exact=True) }}
        - {{ pin_subpackage('py-opencv', exact=True) }}
      run_constrained:
        - opencv-proc * {{ build_type }}

  - name: py-opencv
    build:
      string: h{{ PKG_HASH }}_{{ build_type }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}      #[build_type == "cpu"]
      string: h{{ PKG_HASH }}_{{ build_type }}{{ cudatoolkit | replace(".*", "") }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}      #[build_type == "cuda"]
      track_features:
        {{ "- opencv-cuda" if build_type == 'cuda' else "" }}
      run_exports:
        # Should we even have this???
        # don't pin the python version so hard.
        # Actually, I have found pretty good compatibility in the python
        # package
        - {{ pin_subpackage('py-opencv') }}

    requirements:
      # There is no build script, but I just want it to think
      # that it needs python and numpy at build time
      host:
        - python {{python}}
        - numpy {{numpy}}
      run:
        - python {{python}}
        - {{ pin_compatible('numpy') }}
        - {{ pin_subpackage('libopencv', exact=True) }}
      run_constrained:
        - opencv-proc * {{ build_type }}

      test:
        imports:
          - cv2

about:
  home: http://opencv.org/
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Computer vision and machine learning software library.
  description: Computer vision and machine learning software library.

extra:
  recipe-maintainers:
    - open-ce/open-ce-dev-team


