# This recipe creates 3 packages
# libopencv, py-opencv, opencv
#
# libopencv actually contains all the files, including the site-packages
# file needed to run opencv with python.
#     opencv-dnn seems to change on every patch version, therefore, we pin
#     to the patch version x.x.x
#
# py-opencv is a meta package that constrains the python dependencies
#     This one is pinned to the minor version. x.x
#
# opencv is a backward compatible package, with no pinnings
#
# This approach is different than the one in defaults. Default's package
# seperates well the files generated with python dependencies, from those
# generated without. Unfortunately, this isn't entirely supported by
# upstream. Their hacks are quite elaborate, making it seem difficult to
# maintain as opencv has been changing their build system recently.
#
# By putting all the generated files in 1 package, this makes the build process
# much easier, at the expense of a few MBs in the 'lib' package.
{% set version = "3.4.10" %}
{% set PY_VER_MAJOR = PY_VER[0] %}
{% set PY_VER_MINOR = PY_VER[2] %}

# Modified from recipe at: https://github.com/conda-forge/opencv-feedstock.git

package:
  name: libopencv
  version: {{ version }}

source:
  - git_url: https://github.com/opencv/opencv
    git_tag: {{ version }}
  - url: https://github.com/opencv/opencv_contrib/archive/{{ version }}.tar.gz
    fn: opencv_contrib-{{ version }}.tar.gz
    sha256: 45be02486feaa5c66efc497c463a9b9d6671aa4a125ca8ea2467b8c81201971c
    folder: opencv_contrib

build:
  number: 11
  string: h{{ PKG_HASH }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}
  run_exports:
    # https://abi-laboratory.pro/index.php?view=timeline&l=opencv
    # Things seem to change every patch versions, mostly the dnn module
    - {{ pin_subpackage('libopencv', max_pin='x.x.x') }}

requirements:
  build:
    # Required to find ffpmeg
    - pkg-config {{pkg_config}}
    - cmake {{cmake}}
    - ninja {{ninja}}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ cdt('mesa-libgl-devel') }}
    - {{ cdt('mesa-dri-drivers') }}
    - {{ cdt('libselinux') }}
    - {{ cdt('libxdamage') }}
    - {{ cdt('libxfixes') }}
    - {{ cdt('libxxf86vm') }}
    - zlib {{ zlib }} h7b6447c_3
    # Use pins to control cos6/cos7 match
    - libgcc-ng  {{ libgcc }}
    - libstdcxx-ng  {{ libstdcxx }}
    - libgfortran-ng {{ libgfortran }}
  host:
    - python {{python}} 
    - numpy {{numpy}}
    - hdf5 {{hdf5}}
    - eigen {{eigen}}
    - jasper {{jasper}} h07fcdf6_1
    - openh264 2.1.0
    - zlib {{zlib}} h7b6447c_3
    - jpeg {{jpeg}}
    - libtiff {{libtiff}}
    - libwebp
    - harfbuzz {{harfbuzz}}
    - libpng {{libpng}}
    - ffmpeg {{ffmpeg}}
    - openblas-devel {{openblas}}
    - libopenblas {{openblas}}
    - freetype {{freetype}}
    - protobuf {{ protobuf }}
    - libprotobuf {{ protobuf }}
    # Use pins to control cos6/cos7 match
    - xz 5.2.5 h7b6447c_0      #[x86_64]
    - libidn2  2.3.1   #[x86_64]
    - libgcc-ng  {{ libgcc }}
    - libstdcxx-ng  {{ libstdcxx }}
    - libgfortran-ng {{ libgfortran }}
  run:
    # Don't depend on python in the run section
    # py-opencv will depend on python
    - hdf5                             # versioning handled by run_exports
    - jasper                           # versioning handled by run_exports
    - zlib                             # versioning handled by run_exports
    - jpeg                             # versioning handled by run_exports
    - libwebp
    - harfbuzz                         # versioning handled by run_exports
    - libtiff                          # versioning handled by run_exports
    - libpng                           # versioning handled by run_exports
    - ffmpeg                           # versioning handled by run_exports
    # https://github.com/conda-forge/opencv-feedstock/issues/174
    # Seems like the OSX ABI has changed between 2.9 and 2.10???
    # That or a dependency wasn't merged in
    # Since we don't know the cause, we are choosing this pinning on all platforms.
    - {{ pin_compatible('freetype', min_pin='x.x') }}

outputs:
  - name: libopencv
  - name: opencv
    build:
      string: py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}
    requirements:
      build:
        # Use pins to control cos6/cos7 match
        - libgcc-ng  {{ libgcc }}
        - libstdcxx-ng  {{ libstdcxx }}
        - libgfortran-ng {{ libgfortran }}
      host:
        # Use pins to control cos6/cos7 match
        - libgcc-ng  {{ libgcc }}
        - libstdcxx-ng  {{ libstdcxx }}
        - libgfortran-ng {{ libgfortran }}
      run:
        - {{ pin_subpackage('libopencv', exact=True) }}
        - {{ pin_subpackage('py-opencv', exact=True) }}

  - name: py-opencv
    build:
      string: h{{ PKG_HASH }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}
      run_exports:
        # Should we even have this???
        # don't pin the python version so hard.
        # Actually, I have found pretty good compatibility in the python
        # package
        - {{ pin_subpackage('py-opencv') }}

    requirements:
      # There is no build script, but I just want it to think
      # that it needs python and numpy at build time
      build:
        # Use pins to control cos6/cos7 match
        - libgcc-ng  {{ libgcc }}
        - libstdcxx-ng  {{ libstdcxx }}
        - libgfortran-ng {{ libgfortran }}
      host:
        - python {{python}}
        - numpy {{numpy}}
        # Use pins to control cos6/cos7 match
        - libgcc-ng  {{ libgcc }}
        - libstdcxx-ng  {{ libstdcxx }}
        - libgfortran-ng {{ libgfortran }}
      run:
        - python {{python}}
        - {{ pin_compatible('numpy') }}
        - {{ pin_subpackage('libopencv', exact=True) }}

about:
  home: http://opencv.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Computer vision and machine learning software library.
  description: Computer vision and machine learning software library.

extra:
  recipe-maintainers:
    - open-ce/open-ce-dev-team

